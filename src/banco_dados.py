import mysql.connector
from mysql.connector import errorcode
import datetime

DB_CONFIG = {
    'user': 'farmtech_user',
    'password': 'password',
    'host': 'db',  #'db' √© o nome do servi√ßo no docker-compose.yml
    'database': 'farmtech_db',
    'port': 3306
}

def criar_conexao():
    """Cria e retorna uma conex√£o com o banco de dados MySQL."""
    try:
        conn = mysql.connector.connect(**DB_CONFIG)
        print("Conex√£o com o banco de dados estabelecida.")
        return conn
    except mysql.connector.Error as err:
        if err.errno == errorcode.ER_ACCESS_DENIED_ERROR:
            print("Erro de acesso: verifique usu√°rio e senha.")
        elif err.errno == errorcode.ER_BAD_DB_ERROR:
            print("O banco de dados n√£o existe.")
        else:
            print(f"Erro ao conectar ao banco de dados: {err}")
        return None

def criar_tabelas(conn):
    """Cria as tabelas no banco de dados se n√£o existirem."""
    cursor = conn.cursor()
    
    tabelas = {
        'Plantacao': (
            "CREATE TABLE IF NOT EXISTS `Plantacao` ("
            "  `id` INT AUTO_INCREMENT PRIMARY KEY,"
            "  `nome` VARCHAR(255) NOT NULL,"
            "  `localizacao` VARCHAR(255) NOT NULL,"
            "  `umidade_ideal` FLOAT DEFAULT 60.0,"
            "  `ph_ideal_min` FLOAT DEFAULT 6.0,"
            "  `ph_ideal_max` FLOAT DEFAULT 7.0"
            ") ENGINE=InnoDB"
        ),
        'Sensor': (
            "CREATE TABLE IF NOT EXISTS `Sensor` ("
            "  `id` INT AUTO_INCREMENT PRIMARY KEY,"
            "  `tipo` VARCHAR(50) NOT NULL,"
            "  `id_plantacao` INT NOT NULL,"
            "  FOREIGN KEY (`id_plantacao`) REFERENCES `Plantacao`(`id`) ON DELETE CASCADE"
            ") ENGINE=InnoDB"
        ),
        'Leitura': (
            "CREATE TABLE IF NOT EXISTS `Leitura` ("
            "  `id` INT AUTO_INCREMENT PRIMARY KEY,"
            "  `id_sensor` INT NOT NULL,"
            "  `tipo_sensor` VARCHAR(50) NOT NULL,"
            "  `data_hora` DATETIME NOT NULL,"
            "  `valor` FLOAT NOT NULL,"
            "  FOREIGN KEY (`id_sensor`) REFERENCES `Sensor`(`id`) ON DELETE CASCADE"
            ") ENGINE=InnoDB"
        )
    }
    
    for nome_tabela, ddl in tabelas.items():
        try:
            print(f"Criando tabela {nome_tabela}...", end='')
            cursor.execute(ddl)
            print(" OK")
        except mysql.connector.Error as err:
            print(f"Erro ao criar tabela {nome_tabela}: {err.msg}")
            
    cursor.close()

def inserir_plantacao():
    conn = criar_conexao()
    if not conn: return
    cursor = conn.cursor()
    
    try:
        nome = input("Nome da planta√ß√£o: ")
        local = input("Localiza√ß√£o: ")
        umidade = float(input("Umidade ideal (%): "))
        ph_min = float(input("pH ideal (m√≠nimo): "))
        ph_max = float(input("pH ideal (m√°ximo): "))
        
        query = """
            INSERT INTO Plantacao (nome, localizacao, umidade_ideal, ph_ideal_min, ph_ideal_max) 
            VALUES (%s, %s, %s, %s, %s)
        """
        cursor.execute(query, (nome, local, umidade, ph_min, ph_max))
        conn.commit()
        print("üå± Planta√ß√£o cadastrada com sucesso!")
    except ValueError:
        print("‚ö†Ô∏è Entrada inv√°lida. Certifique-se de inserir n√∫meros para umidade e pH.")
    except mysql.connector.Error as err:
        print(f"Erro ao inserir planta√ß√£o: {err}")
    finally:
        cursor.close()
        conn.close()

def inserir_sensor():
    conn = criar_conexao()
    if not conn: return
    cursor = conn.cursor()

    try:
        listar_plantacoes_simples() # Lista as planta√ß√µes sem abrir nova conex√£o
        id_plantacao = int(input("ID da planta√ß√£o √† qual o sensor pertence: "))
        tipo = input("Tipo do sensor (ex: Umidade, pH, Temperatura): ")
        
        # Verificar se a planta√ß√£o existe
        cursor.execute("SELECT id FROM Plantacao WHERE id = %s", (id_plantacao,))
        if not cursor.fetchone():
            print("‚ö†Ô∏è Planta√ß√£o n√£o encontrada!")
            return

        query = """
            INSERT INTO Sensor (tipo, id_plantacao) 
            VALUES (%s, %s)
        """
        cursor.execute(query, (tipo, id_plantacao))
        conn.commit()
        print("üì° Sensor cadastrado com sucesso!")
    except ValueError:
        print("‚ö†Ô∏è Entrada inv√°lida. Certifique-se de inserir um n√∫mero para o ID da planta√ß√£o.")
    except mysql.connector.Error as err:
        print(f"Erro ao inserir sensor: {err}")
    finally:
        cursor.close()
        conn.close()

def inserir_leitura():
    conn = criar_conexao()
    if not conn: return
    cursor = conn.cursor()

    try:
        listar_sensores_simples() # Lista os sensores sem abrir nova conex√£o
        id_sensor = int(input("ID do sensor: "))
        
        cursor.execute('SELECT tipo FROM Sensor WHERE id = %s', (id_sensor,))
        resultado = cursor.fetchone()
        if not resultado:
            print("‚ö†Ô∏è Sensor n√£o encontrado!")
            return
        tipo_sensor = resultado[0]

        valor = float(input(f"Valor da leitura para o sensor de '{tipo_sensor}': "))
        data_hora = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        
        query = """
            INSERT INTO Leitura (id_sensor, tipo_sensor, data_hora, valor) 
            VALUES (%s, %s, %s, %s)
        """
        cursor.execute(query, (id_sensor, tipo_sensor, data_hora, valor))
        conn.commit()
        print("üìä Leitura registrada com sucesso!")
    except ValueError:
        print("‚ö†Ô∏è Entrada inv√°lida. Certifique-se de inserir n√∫meros para o ID do sensor e o valor da leitura.")
    except mysql.connector.Error as err:
        print(f"Erro ao inserir leitura: {err}")
    finally:
        cursor.close()
        conn.close()

def listar_plantacoes():
    conn = criar_conexao()
    if not conn: return
    cursor = conn.cursor()

    try:
        cursor.execute("SELECT id, nome, localizacao, umidade_ideal, ph_ideal_min, ph_ideal_max FROM Plantacao")
        plantacoes = cursor.fetchall()
        
        if not plantacoes:
            print("Nenhuma planta√ß√£o cadastrada.")
            return

        print("\n--- Lista de Planta√ß√µes ---")
        for p in plantacoes:
            print(f"ID: {p[0]}, Nome: {p[1]}, Localiza√ß√£o: {p[2]}, Umidade Ideal: {p[3]}%, pH Ideal: {p[4]}-{p[5]}")
        print("--------------------------")
    except mysql.connector.Error as err:
        print(f"Erro ao listar planta√ß√µes: {err}")
    finally:
        cursor.close()
        conn.close()

def listar_plantacoes_simples():
    """Lista as planta√ß√µes sem abrir e fechar conex√£o, √∫til para ser chamada dentro de outras fun√ß√µes."""
    conn = criar_conexao()
    if not conn: return
    cursor = conn.cursor()

    try:
        cursor.execute("SELECT id, nome FROM Plantacao")
        plantacoes = cursor.fetchall()
        
        if not plantacoes:
            print("Nenhuma planta√ß√£o cadastrada.")
            return

        print("\n--- Planta√ß√µes Dispon√≠veis ---")
        for p in plantacoes:
            print(f"ID: {p[0]}, Nome: {p[1]}")
        print("--------------------------")
    except mysql.connector.Error as err:
        print(f"Erro ao listar planta√ß√µes (simples): {err}")
    finally:
        cursor.close()
        conn.close()

def listar_sensores():
    conn = criar_conexao()
    if not conn: return
    cursor = conn.cursor()

    try:
        cursor.execute("""
            SELECT s.id, s.tipo, p.nome AS plantacao_nome 
            FROM Sensor s
            JOIN Plantacao p ON s.id_plantacao = p.id
        """)
        sensores = cursor.fetchall()
        
        if not sensores:
            print("Nenhum sensor cadastrado.")
            return

        print("\n--- Lista de Sensores ---")
        for s in sensores:
            print(f"ID: {s[0]}, Tipo: {s[1]}, Planta√ß√£o: {s[2]}")
        print("------------------------")
    except mysql.connector.Error as err:
        print(f"Erro ao listar sensores: {err}")
    finally:
        cursor.close()
        conn.close()

def listar_sensores_simples():
    """Lista os sensores sem abrir e fechar conex√£o, √∫til para ser chamada dentro de outras fun√ß√µes."""
    conn = criar_conexao()
    if not conn: return
    cursor = conn.cursor()

    try:
        cursor.execute("SELECT id, tipo FROM Sensor")
        sensores = cursor.fetchall()
        
        if not sensores:
            print("Nenhum sensor cadastrado.")
            return

        print("\n--- Sensores Dispon√≠veis ---")
        for s in sensores:
            print(f"ID: {s[0]}, Tipo: {s[1]}")
        print("--------------------------")
    except mysql.connector.Error as err:
        print(f"Erro ao listar sensores (simples): {err}")
    finally:
        cursor.close()
        conn.close()

def listar_leituras():
    conn = criar_conexao()
    if not conn: return
    cursor = conn.cursor()

    try:
        cursor.execute("""
            SELECT l.id, l.id_sensor, l.tipo_sensor, l.data_hora, l.valor, p.nome AS plantacao_nome
            FROM Leitura l
            JOIN Sensor s ON l.id_sensor = s.id
            JOIN Plantacao p ON s.id_plantacao = p.id
            ORDER BY l.data_hora DESC
        """)
        leituras = cursor.fetchall()
        
        if not leituras:
            print("Nenhuma leitura registrada.")
            return

        print("\n--- Hist√≥rico de Leituras ---")
        for l in leituras:
            print(f"ID: {l[0]}, Sensor ID: {l[1]} ({l[2]}), Planta√ß√£o: {l[5]}, Data/Hora: {l[3]}, Valor: {l[4]}")
        print("----------------------------")
    except mysql.connector.Error as err:
        print(f"Erro ao listar leituras: {err}")
    finally:
        cursor.close()
        conn.close()

def atualizar_plantacao():
    conn = criar_conexao()
    if not conn: return
    cursor = conn.cursor()

    try:
        listar_plantacoes_simples()
        idp = int(input("ID da planta√ß√£o a atualizar: "))
        
        # Verificar se a planta√ß√£o existe
        cursor.execute("SELECT id FROM Plantacao WHERE id = %s", (idp,))
        if not cursor.fetchone():
            print("‚ö†Ô∏è Planta√ß√£o n√£o encontrada!")
            return

        nome = input("Novo nome (deixe em branco para n√£o alterar): ")
        local = input("Nova localiza√ß√£o (deixe em branco para n√£o alterar): ")
        umidade_str = input("Nova Umidade ideal (%) (deixe em branco para n√£o alterar): ")
        ph_min_str = input("Novo pH ideal (m√≠nimo) (deixe em branco para n√£o alterar): ")
        ph_max_str = input("Novo pH ideal (m√°ximo) (deixe em branco para n√£o alterar): ")

        updates = []
        params = []

        if nome:
            updates.append("nome=%s")
            params.append(nome)
        if local:
            updates.append("localizacao=%s")
            params.append(local)
        if umidade_str:
            try:
                umidade = float(umidade_str)
                updates.append("umidade_ideal=%s")
                params.append(umidade)
            except ValueError:
                print("‚ö†Ô∏è Umidade ideal inv√°lida. Manter valor existente.")
        if ph_min_str:
            try:
                ph_min = float(ph_min_str)
                updates.append("ph_ideal_min=%s")
                params.append(ph_min)
            except ValueError:
                print("‚ö†Ô∏è pH m√≠nimo ideal inv√°lido. Manter valor existente.")
        if ph_max_str:
            try:
                ph_max = float(ph_max_str)
                updates.append("ph_ideal_max=%s")
                params.append(ph_max)
            except ValueError:
                print("‚ö†Ô∏è pH m√°ximo ideal inv√°lido. Manter valor existente.")
        
        if not updates:
            print("Nenhuma altera√ß√£o a ser feita.")
            return

        query = f"UPDATE Plantacao SET {', '.join(updates)} WHERE id=%s"
        params.append(idp)
        
        cursor.execute(query, tuple(params))
        conn.commit()
        if cursor.rowcount > 0:
            print("‚úÖ Planta√ß√£o atualizada com sucesso!")
        else:
            print("Nenhuma altera√ß√£o foi aplicada (talvez o ID n√£o exista).")
    except ValueError:
        print("‚ö†Ô∏è Entrada inv√°lida. Certifique-se de inserir um n√∫mero para o ID.")
    except mysql.connector.Error as err:
        print(f"Erro ao atualizar planta√ß√£o: {err}")
    finally:
        cursor.close()
        conn.close()

def remover_plantacao():
    conn = criar_conexao()
    if not conn: return
    cursor = conn.cursor()

    try:
        listar_plantacoes_simples()
        idp = int(input("ID da planta√ß√£o a remover: "))
        
        # Verificar se a planta√ß√£o existe antes de tentar remover
        cursor.execute("SELECT id FROM Plantacao WHERE id = %s", (idp,))
        if not cursor.fetchone():
            print("‚ö†Ô∏è Planta√ß√£o n√£o encontrada!")
            return

        cursor.execute('DELETE FROM Plantacao WHERE id=%s', (idp,))
        conn.commit()
        if cursor.rowcount > 0:
            print("üóëÔ∏è Planta√ß√£o removida com sucesso!")
        else:
            print("Nenhuma planta√ß√£o foi removida (ID n√£o encontrado).")
    except ValueError:
        print("‚ö†Ô∏è Entrada inv√°lida. Certifique-se de inserir um n√∫mero para o ID.")
    except mysql.connector.Error as err:
        print(f"Erro ao remover planta√ß√£o: {err}")
    finally:
        cursor.close()
        conn.close()

def remover_sensor():
    conn = criar_conexao()
    if not conn: return
    cursor = conn.cursor()

    try:
        listar_sensores_simples()
        ids = int(input("ID do sensor a remover: "))
        
        # Verificar se o sensor existe
        cursor.execute("SELECT id FROM Sensor WHERE id = %s", (ids,))
        if not cursor.fetchone():
            print("‚ö†Ô∏è Sensor n√£o encontrado!")
            return

        cursor.execute('DELETE FROM Sensor WHERE id=%s', (ids,))
        conn.commit()
        if cursor.rowcount > 0:
            print("üóëÔ∏è Sensor removido com sucesso!")
        else:
            print("Nenhum sensor foi removido (ID n√£o encontrado).")
    except ValueError:
        print("‚ö†Ô∏è Entrada inv√°lida. Certifique-se de inserir um n√∫mero para o ID.")
    except mysql.connector.Error as err:
        print(f"Erro ao remover sensor: {err}")
    finally:
        cursor.close()
        conn.close()

def remover_leitura():
    conn = criar_conexao()
    if not conn: return
    cursor = conn.cursor()

    try:
        listar_leituras()
        idl = int(input("ID da leitura a remover: "))
        
        # Verificar se a leitura existe
        cursor.execute("SELECT id FROM Leitura WHERE id = %s", (idl,))
        if not cursor.fetchone():
            print("‚ö†Ô∏è Leitura n√£o encontrada!")
            return

        cursor.execute('DELETE FROM Leitura WHERE id=%s', (idl,))
        conn.commit()
        if cursor.rowcount > 0:
            print("üóëÔ∏è Leitura removida com sucesso!")
        else:
            print("Nenhuma leitura foi removida (ID n√£o encontrado).")
    except ValueError:
        print("‚ö†Ô∏è Entrada inv√°lida. Certifique-se de inserir um n√∫mero para o ID.")
    except mysql.connector.Error as err:
        print(f"Erro ao remover leitura: {err}")
    finally:
        cursor.close()
        conn.close()

def menu():
    conn_init = criar_conexao()
    if conn_init:
        criar_tabelas(conn_init)
        conn_init.close()
    else:
        print("N√£o foi poss√≠vel conectar ao banco de dados na inicializa√ß√£o. Algumas funcionalidades podem n√£o estar dispon√≠veis.")

    while True:
        print("""
======== üå± MENU FARMTECH üå± ========
1. Inserir Planta√ß√£o
2. Inserir Sensor
3. Inserir Leitura

4. Listar Planta√ß√µes
5. Listar Sensores
6. Listar Leituras

7. Atualizar Planta√ß√£o

8. Remover Planta√ß√£o
9. Remover Sensor
10. Remover Leitura

0. Sair
""")
        opcao = input("Escolha uma op√ß√£o: ")

        if opcao == '1':
            inserir_plantacao()
        elif opcao == '2':
            inserir_sensor()
        elif opcao == '3':
            inserir_leitura()
        elif opcao == '4':
            listar_plantacoes()
        elif opcao == '5':
            listar_sensores()
        elif opcao == '6':
            listar_leituras()
        elif opcao == '7':
            atualizar_plantacao()
        elif opcao == '8':
            remover_plantacao()
        elif opcao == '9':
            remover_sensor()
        elif opcao == '10':
            remover_leitura()
        elif opcao == '0':
            print("üåæ Encerrando o programa.")
            break
        else:
            print("‚ö†Ô∏è Op√ß√£o inv√°lida!")

if __name__ == '__main__':
    menu()
